#!/usr/bin/python

import telnetlib
import re
import sys
import json
import threading
import time
#import requests
import os
import subprocess
import logging
import pymysql.cursors
import http.client
import ast 

pacing_data = {}
call_data = {}
camp_data = {}
pace_lock=threading.Lock()
call_lock=threading.Lock()
camp_lock=threading.Lock()

db_config = {
    'host': 'localhost',
    'user': 'root',
    'password': 'ASTERISK',
    'database': 'asterisk'
}


def lead_api(camp_id,lead):
	conn = http.client.HTTPSConnection("crmtest.nivabupa.com")
	payload = f"[{{\"campaign_id\":{camp_id},\"lead_count\":{lead}}}]"
	print(payload)
	headers = {  'Content-Type': 'application/json'}
	conn.request("POST", "/api/v1/crm/campaign_leads", payload, headers)
	res = conn.getresponse()
	data = res.read()
	alllead = data.decode("utf-8")
	return(alllead)

def api_hit():
	conn = http.client.HTTPSConnection("calling.nivabupa.com")
	payload = ''
	headers = {}
	conn.request("GET", "/queueui/src/ami.php?q=liveUsers", payload, headers)
	res = conn.getresponse()
	data = res.read()
	alld = data.decode("utf-8")
	alldata = ast.literal_eval(alld)
	agent_col =[str(row['resource']) for row in alldata if str(row['state']) == "online"]

	return(agent_col)


# Function to establish a MySQL connection with retry logic
def get_mysql_connection(retries=3, delay=5):
	attempts = 0
	while attempts < retries:
		try:
			conn = pymysql.connect(**db_config)
			#if conn.is_connected():
			print(f"Connected to the database after {attempts+1} attempt(s).")
			return conn
		except pymysql.MySQLError as err:
			print(f"Connection attempt {attempts+1} failed: {err}")
			attempts += 1
			time.sleep(delay)  # Wait before retrying
	print("Failed to connect after multiple attempts.")
	return None


def PROG_DIAL(id_):

	print(f'thread with id: {id_} started')
	conn_5038 = tel(5038, auth=True)
	connection = get_mysql_connection()
	while (1):

		try:
			with connection.cursor() as cursor:
				#sql = "select name,secret,callerid from sip_buddies limit 5;"
				sql = "SELECT distinct(name),`campaign_id`,`call_type`,`call_method` from queues where `call_method`='Progrrasive';"
				cursor.execute(sql)
				result = cursor.fetchall()
				for all in result:
					print(f"PROG {all[0]},{all[1]}")
            	
		except:
			log.exception('Issue while reading data')
			conn_5038 = tel(5038, auth=True)

		time.sleep(10)

def PRD_DIAL(id_):

	print(f'thread with id: {id_} started')
	conn_5038 = tel(5038, auth=True)
	connection = get_mysql_connection()
	while (1):

		try:
			with connection.cursor() as cursor:
				sql = "SELECT distinct(name),`campaign_id`,`call_type`,`call_method` from queues where `call_method`='Predictive';"
				cursor.execute(sql)
				result = cursor.fetchall()
				for all in result:
					camp_name = all[0]
					sql = f"SELECT * FROM `queue_member_table` where `queue_name` = '{camp_name}';";
					cursor.execute(sql)
					result1 = cursor.fetchall()
					if result1:
						agent_col =[str(row[1]) for row in result1]
						agents1 = ', '.join(agent_col)
						#print(f"PROG {all[0]},{agents}")
						agents = agents1.replace(', ','\',\'')
						sql = f"SELECT `name` FROM `sip_buddies` where `name` IN ('{agents}') and `unmarked_lead` = 0 and `next_lead` = 0 and `is_loggedin`=1 and length(fullcontact)>0;";
						camp_id = all[1]
						with pace_lock:
							if camp_id not in pacing_data:
								pacing_data[camp_id] = 1
						cursor.execute(sql)
						result2 = cursor.fetchall()
						if result2:
							avl_agent =[str(row[0]) for row in result2]
							on_agent=api_hit()					
							final_agents = [item for item in avl_agent if item in on_agent]	
							#print(final_agents,type(final_agents))	
							agent_count = len(final_agents)
							print(f"PROG, {all[0]}, {agent_count}")
							#leads_data = lead_api(camp_id,lead)
				#leads_str = lead_api(100,1)
				#allleads = ast.literal_eval(leads_str)
				#print(allleads,type(allleads))
				#campid = allleads["data"][0]["campaign_id"]
				#leads = allleads["data"][0]["leads"]
				#if leads:
				#	for dial_lead in leads:
			#			waittime = 60
			#			CallerId = "9540581030-275248-1"
		#				leadid = leads["lead_id"] 
	#					bnsdid = leads["business_id"]
	#					mob = leads["mobile_number"][0] 
	#					b1 = leads["mobile_number"][1] 
	#					b2 = leads["mobile_number"][2] 
	#					print(campid,leadid,bnsdid,mob,b1,b2) 
				#print("++++",campid,leads)

					#cmd = f"Action: originate\r\nChannel: LOCAL/{mob}@dial_predictive\r\nWaitTime: {waittime}\r\nExten: {mob}\r\nContext: predictive\r\nCallerId: {CallerId}\r\nAsync: true\r\nVariable: lead_id={leadid}\r\nVariable: business_type={bnsdid}\r\nVariable: mobile_number={mob}\r\nVariable: campaign_id={campid}\r\nVariable: dest_queue={camp_name}\r\nVariable: callable=\r\nVariable: call_method=Predictive\r\nVariable: call_type=\r\nAccount: {camp_name}\r\nPriority: 1\r\n\r\nAsync: true\r\n\r\n"
					#log.info(f"DELETE BLOCK PACKET===> {cmd}\n")
                    			#conn_5038.write(cmd.encode())
            	
		except:
			log.exception('Issue while reading data')
			conn_5038 = tel(5038, auth=True)
		time.sleep(10)

def NEW_EVENT(id_):
	
	print(f'thread with id: {id_} started')
	conn_5038 = tel(5038, auth=True)
	while (1):

		try:
			event = conn_5038.read_until(b'\r\n\r\n')
			event = event.decode('utf-8')
			#print("EVENT",event)
			event_dict = {}
			if "Event: Newchannel" in event and "Context: dial_predictive" in event and "Variable: campaign_id" in event:
				print("EVENT",event)
				pdata = event.split('Uniqueid: ',1)
				uid = pdata.split('\r\n',0)
				print("UID",uid)
				with call_lock:
					if uid not in call_data:
						call_data[uid] = 0
            	
		except:
			log.exception('Issue While Read DATA.')
			conn_5038 = tel(5038, auth=True)
		time.sleep(0.1)

def VAR_EVENT(id_):
	
	print(f'thread with id: {id_} started')
	conn_5038 = tel(5038, auth=True)
	while (1):

		try:
			event = conn_5038.read_until(b'\r\n\r\n')
			event = event.decode('utf-8')
			#print("EVENT",event)
			event_dict = {}
			if "Event: VarSet" in event and "Context: dial_predictive" in event and "ChannelStateDesc: Down" in event:
				print("EVENT",event)
				pdata = event.split('Uniqueid: ',1)
				uid = pdata.split('\r\n',0)
				vdata = pdata.split('Value: ',1)
				cval = vdata.split('\r\n',0)
				print("UID_CVAL",uid,cval)
				with call_lock:
					if uid in call_data:
						call_data[uid] = cval
            	
		except:
			log.exception('Issue While Read DATA.')
			conn_5038 = tel(5038, auth=True)
		time.sleep(0.1)

def PACE_MON(id_):
	
	print(f'thread with id: {id_} started')
	while (1):

		try:
			with pace_lock:
				print("PACING",pacing_data)
			with call_lock:
				print("CALL_DATA", call_data)
            	
		except:
			log.exception('Issue while Pacing Monitor.')

		time.sleep(7)
# Create new threads
fnc  = {
    'prg_dial': [PROG_DIAL, (1,)],
    'prd_dial': [PRD_DIAL, (2,)],
    'pace_mon': [PACE_MON, (3,)],
    'new_pack': [NEW_EVENT, (4,)]
}
log = logging.getLogger('muylooger')
logging.basicConfig(level=logging.DEBUG,format="%(asctime)s : %(levelname)s : %(lineno)s :: %(message)s", filename='/tmp/common_log.txt')
log.info('=========== RESTART SERVICE =========')

def tel(port, auth=False, connection_limit=None):

    while 1:
        try:
            log.debug(f'Connecting to telnet on {port}')
            telnet_conn = telnetlib.Telnet('localhost',port)
            if auth:
                telnet_conn.write(b"action: login\r\nusername: max_mbhi\r\nsecret: mbhi_max\r\nEvent: on\r\n\r\n")
                telnet_conn.read_until(b"Authentication accepted")
                log.info('Auth accepted\nConnection created with port: {port}')

        except:
            log.exception('Reconnection issue')
            time.sleep(3)

        else:
            return telnet_conn

while 1:

    THLIST = [x.name for x in threading.enumerate()]

    for fname, fargs in fnc.items():
        if fname not in THLIST:
            thr = threading.Thread(target=fargs[0], args=fargs[1], name=fname)
            thr.start()

    log.info(f"Threads list===>{THLIST}")
    time.sleep(5)

